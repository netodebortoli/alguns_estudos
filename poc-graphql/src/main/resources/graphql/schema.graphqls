# O operador '!' indica que o campo é obrigatório e não pode ser nulo.
type Book {
    id: ID!
    name: String!
    pageCount: Int!
    author: Author!
}

type Author {
    id: ID!
    firstName: String!
    lastName: String!
}

# Input é um tipo de objeto usado para agrupar argumentos em mutações ou outros campos, tornando-os mais claros e organizados.
input UpdatedBook {
    name: String!
    pageCount: Int!
    authorId: ID!
}

# O tipo 'Query' define as operações do tipo consulta.
type Query {
    bookById(id: ID): Book
    authorById(id: ID): Author
    findAllBooks: [Book]
}

# O tipo 'Mutation' define as operações do tipo mutação (criar, deletar, excluir).
type Mutation {
    createBook(book: UpdatedBook): Book
    updateBook(id: ID, book: UpdatedBook): Book
    deleteBook(id: ID): Boolean
}
